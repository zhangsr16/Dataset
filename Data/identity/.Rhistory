convol=Han(mix)
lines((1:length(convol))+3, convol, col = "red") #引入维度，消耗自由度，需前后偏移
convol=Han(convol)
lines((1:length(convol))+6, convol, col = "dark blue") #引入二阶维度，消耗自由度，需前后偏移
#傅里叶+卷积
#Application
x=0:100
y1=1*sin(0.3*x)
y2=2*sin(0.2*x)
y3=3*sin(0.1*x)
mix=y1+y2+y3
fft_result <- fft(mix)
require(graphics)
Han <- function(y) # Hanning
convolve(y, c(1,2,3)/6, type = "filter")
#FFT 用例
mix=y1+y2+y3
plot(x, mix, main = "Using  convolve(.) for Hanning filters")
convol=Han(mix) #三维拟合
lines(x[-c(1, n)], Han(mix), col = "red")
lines(x[-c(1:2, (n-1):n)], Han(Han(mix)), lwd = 2, col = "dark blue")
Han <- function(y) # Hanning
convolve(y, c(1,2,3,30,20,10)/66, type = "filter")
plot(x, mix, main = "Using  convolve(.) for Hanning filters")
convol=Han(mix)
lines((1:length(convol))+3, convol, col = "red") #引入维度，消耗自由度，需前后偏移
convol=Han(convol)
lines((1:length(convol))+6, convol, col = "dark blue") #引入二阶维度，消耗自由度，需前后偏移
#傅里叶+卷积
#Application
x=0:1000
y1=1*sin(0.3*x)
y2=2*sin(0.2*x)
y3=3*sin(0.1*x)
mix=y1+y2+y3
Han <- function(y) # Hanning
convolve(y, c(1,2,3)/6, type = "filter")
plot(x, mix, main = "Using  convolve(.) for Hanning filters")
convol=Han(mix) #三维拟合
lines(x[-c(1, n)], Han(mix), col = "red")
n <- length(x <- -20:24)
Han <- function(y) # Hanning
convolve(y, c(1,2,3)/6, type = "filter")
#FFT 用例
mix=y1+y2+y3
plot(x, mix, main = "Using  convolve(.) for Hanning filters")
convol=Han(mix) #三维拟合
lines(x[-c(1, n)], Han(mix), col = "red")
lines(x[-c(1:2, (n-1):n)], Han(Han(mix)), lwd = 2, col = "dark blue")
n <- length(x)
Han <- function(y) # Hanning
convolve(y, c(1,2,3)/6, type = "filter")
#FFT 用例
mix=y1+y2+y3
plot(x, mix, main = "Using  convolve(.) for Hanning filters")
#傅里叶+卷积
#Application
x=0:1000
y1=1*sin(0.3*x)
y2=2*sin(0.2*x)
y3=3*sin(0.1*x)
mix=y1+y2+y3
fft_result <- fft(mix)
n <- length(x)
Han <- function(y) # Hanning
convolve(y, c(1,2,3)/6, type = "filter")
#FFT 用例
mix=y1+y2+y3
plot(x, mix, main = "Using  convolve(.) for Hanning filters")
convol=Han(mix) #三维拟合
lines(x[-c(1, n)], Han(mix), col = "red")
lines(x[-c(1:2, (n-1):n)], Han(Han(mix)), lwd = 2, col = "dark blue")
Han <- function(y) # Hanning
convolve(y, c(1,2,3,30,20,10)/66, type = "filter")
plot(x, mix, main = "Using  convolve(.) for Hanning filters")
convol=Han(mix)
lines((1:length(convol))+3, convol, col = "red") #引入维度，消耗自由度，需前后偏移
convol=Han(convol)
lines((1:length(convol))+6, convol, col = "dark blue") #引入二阶维度，消耗自由度，需前后偏移
library(MDPtoolbox)
P <- array(0, c(2,2,2))
P[,,1] <- matrix(c(0.5, 0.5, 0.8, 0.2), 2, 2, byrow=TRUE)
P[,,2] <- matrix(c(0, 1, 0.1, 0.9), 2, 2, byrow=TRUE)
R <- matrix(c(5, 10, -1, 2), 2, 2, byrow=TRUE)
R
P
P[[1]] <- Matrix(c(0.5, 0.5, 0.8, 0.2), 2, 2, byrow=TRUE, sparse=TRUE)
P <- list()
P[[1]] <- Matrix(c(0.5, 0.5, 0.8, 0.2), 2, 2, byrow=TRUE, sparse=TRUE)
P[[2]] <- Matrix(c(0, 1, 0.1, 0.9), 2, 2, byrow=TRUE, sparse=TRUE)
P
mdp_Q_learning(P, R, discount, N)
plot(1,5,8,9,10,17,17,20,24,30)
plot(c(1,5,8,9,10,17,17,20,24,30))
plot(c(1,5,8,9,10,17,17,20,24,30)-c(0,1,5,8,9,10,17,17,20,24))
mfrow(par=c(2,1))
par(mfrow=c(2,1))
plot(c(1,5,8,9,10,17,17,20,24,30)-c(0,1,5,8,9,10,17,17,20,24))
par(mfrow=c(2,1))
plot(c(1,5,8,9,10,17,17,20,24,30))
plot(c(1,5,8,9,10,17,17,20,24,30)-c(0,1,5,8,9,10,17,17,20,24))
y=c(1,5,8,9,10,17,17,20,24,30)
plot(y)
y1=y[-length(y)]-y[-1]
plot(y1)
length(y)
y=c(0,1,5,8,9,10,17,17,20,24,30)
plot(y)
y1=y[-1]-y[-length(y)]
plot(y1)
y2=y1[-1]-y1[-length(y)]
y2=y1[-1]-y1[-length(y1)]
plot(y2)
par(mfrow=c(3,1))
y=c(0,1,5,8,9,10,17,17,20,24,30)
plot(y)
y1=y[-1]-y[-length(y)]
plot(y1)
y2=y1[-1]-y1[-length(y1)]
plot(y2)
par(mfrow=c(3,1))
y=c(0,1,5,8,9,10,17,17,20,24,30)
plot(0:10, y)
plot(1:10, y1)
points(1:10, y1)
par(mfrow=c(3,1))
y=c(0,1,5,8,9,10,17,17,20,24,30)
plot(0:10, y)
y1=y[-1]-y[-length(y)]
plot(1:10, y1)
y2=y1[-1]-y1[-length(y1)]
plot(2:10, y2)
10%8
10mod8
10/8
123456%60
y=c(0,0,0,0,0
1,1,1,1,1
y=c(0,0,0,0,0,
1,1,1,1,1,
2,2,2,2,2,
3,3,3,3,3)
y1=c(0,1,2,3,4,
1,2,3,4,5,
2,3,4,5,6,
3,4,5,6,7)
dim(y)=c(4,5)
y
dim(y)=c(4,5); dim(y1)=c(4,5)
y1
y-y1
dim(y)=c(5,4); dim(y1)=c(5,4)
y-y1
y
dim(y)=c(4,5); dim(y1)=c(4,5)
y
dim(y)=c(5,4); dim(y1)=c(5,4)
y
y1
y=t(y); y1=t(y1)
y1
y
y-y1
y+y1
t(y1)
y%*%t(y)
t(y)%*%y
method(mean())
method(mean)
?mean
getAnywhere(mean())
getAnywhere(mean
)
UseMethod("mean")
Method("mean")
Method(mean)
?methods
methods(mean)
methods(hist)
?methods
getAnywhere(lm.formula)
getAnywhere(mean)
[2]
getAnywhere(mean[2])
getAnywhere(mean[package:base])
page(mean)
page(hist)
mean.default()
mean.default
hist.default
#prepara
Data.1 = data.frame(ID = 1:60, Rep = NA, Lvl = NA, Abs = NA, Lct = NA)
n = 0
for (lvl in 1:5) {
for (lct in 1:3) {
for (rep in 1:4) {
n = n+1
Data.1[which(Data.1$ID==n), "Rep"] = rep
Data.1[which(Data.1$ID==n), "Lvl"] = lvl
Data.1[which(Data.1$ID==n), "Lct"] = lct
}
}
}
Data.1
y=c(0,0,0,0,0,
1,1,1,1,1,
2,2,2,2,2,
3,3,3,3,3)
y1=c(0,1,2,3,4,
1,2,3,4,5,
2,3,4,5,6,
3,4,5,6,7)
dim(y)=c(5,4); dim(y1)=c(5,4)
y
y1
y%*%y1
y%*%t(y1)
t(y)%*%y1
2^16
x=c(1,1,1,0);dim(x)=c(2,2)
x
x.e=eigen(x,symmetric=F)
x
x.e
x.e$vectors%*%diag(x.e$values)%*%t(x.e$vectors)#
diag(x.e$values)
x.e$values
round(x.e$vectors%*%diag(x.e$values)^10%*%t(x.e$vectors))
x0=c(1,0);dim(x0)=c(1,2)
x0
x0=c(1,0);dim(x0)=c(2,1)
round(x.e$vectors%*%diag(x.e$values)^10%*%t(x.e$vectors))%*%x0
a=c(0,3,8,999,-4,
999,0,999,1,7,
999,4,0,999,999,
2,999,-5,0,999,
999,999,999,6,0)
dim(a)=c(5,5)
a
a%*%t(a)
t(a)%*%a
par(mfrow=c(2,3))
plot(a[1,],1:5)
a
a[1,]
plot(a[,1],1:5)
plot(1:5, a[,1])
plot(1:5, a[,1], ylim = c(-10,10))
plot(1:5, a[,1], ylim = c(-10,10))
par(mfrow=c(2,3))
plot(1:5, a[,1], ylim = c(-10,10))
par(mfrow=c(2,3))
for (i in 1:6) {
plot(1:5, a[,i], ylim = c(-10,10))
}
a=c(1,0,0,
0,0,1,
1,0,0)
dim(a)=c(3,3)
a%*%t(a)
1-a
b=1-a
b%*%t(b)
x=c(-3,3,2,5,0,7);
y=c(0,0,6,4,9,8);
x0=mean(x)
y0=mean(y)
d=rep(0,6)
for (i in 1:6) {
d[i]=(x[i]-x0)^2+(y[i]-y0)^2
}
sum(d>25)
d
quantile(x, 0.9)
quantile(y, 0.9)
median(x)
median(y)
x0=median(x)
y0=median(y)
d=rep(0,6)
r=5
for (i in 1:6) {
d[i]=(x[i]-x0)^2+(y[i]-y0)^2
}
sum(d<=25)
d
x0=mean(x)
y0=mean(y)
d=rep(0,6)
r=5
for (i in 1:6) {
d[i]=(x[i]-x0)^2+(y[i]-y0)^2
}
sum(d<=25)
hist''
hist(x)
hist(y)
hist(x)
d=rep(0,36);
x=c(-3,3,2,5,0,7)
y=c(0,0,6,4,9,8)
d=rep(0,36)
n=1
for (i in 1:6) {
for (j in i:6) {
d[n]=(x[i]-x0)^2+(y[i]-y0)^2
n=n+1
}
}
d
dim(d)=c(6,6)
d
x=c(-3,3,2,5,0,7)
y=c(0,0,6,4,9,8)
d=rep(0,36)
n=1
for (i in 1:6) {
for (j in i:6) {
d[n]=(x[i]-x[j])^2+(y[i]-y[j])^2
n=n+1
}
}
dim(d)=c(6,6)
d
n=1
for (i in 1:6) {
for (j in (i+1):6) {
d[n]=(x[i]-x[j])^2+(y[i]-y[j])^2
n=n+1
}
}
dim(d)=c(6,6)
d
d=rep(0,36)
dim(d)=c(6,6)
d[1][1]
x=c(-3,3,2,5,0,7)
y=c(0,0,6,4,9,8)
d=rep(0,36)
dim(d)=c(6,6)
for (i in 1:6) {
for (j in (i+1):6) {
d[i][j]=(x[i]-x[j])^2+(y[i]-y[j])^2
}
}
(x[i]-x[j])^2+(y[i]-y[j])^2
(x[i]-x[j])^2
x[i]
x[i]-x[j]
for (i in 1:5) {
for (j in (i+1):6) {
d[i][j]=(x[i]-x[j])^2+(y[i]-y[j])^2
}
}
d[i,j]
dim(d)=c(6,6)
for (i in 1:5) {
for (j in (i+1):6) {
d[i,j]=(x[i]-x[j])^2+(y[i]-y[j])^2
}
}
d
dsum=rep(0,6)
x=c(-3,3,2,5,0,7)
y=c(0,0,6,4,9,8)
d=rep(0,36)
dim(d)=c(6,6)
dsum=rep(0,6)
for (i in 1:6) {
for (j in 1:6) {
d[i,j]=(x[i]-x[j])^2+(y[i]-y[j])^2
}
dsum[i]=d[i,]
}
d[i,]
for (i in 1:6) {
for (j in 1:6) {
d[i,j]=(x[i]-x[j])^2+(y[i]-y[j])^2
}
dsum[i]=sum(d[i,])
}
d
dsum[i]
dsum
hist(dsum)
x0=mean(x[-1])
y0=mean(y[-1])
d=rep(0,6)
r=5
for (i in 1:6) {
d[i]=(x[i]-x0)^2+(y[i]-y0)^2
}
d
which(x==min(x))
which(dsum==min(dsum))
del=c(which(dsum==max(dsum),which(dsum==min(dsum)))
del
del
del=c(which(dsum==max(dsum),which(dsum==min(dsum)))
del=c(which(dsum==max(dsum),which(dsum==min(dsum))))
del=c(which(dsum==max(dsum),which(dsum==min(dsum))))
del
which(dsum==max(dsum)
del=c(which(dsum==max(dsum)),which(dsum==min(dsum))))
del=c(which(dsum==max(dsum)),which(dsum==min(dsum))))
i=which(dsum==max(dsum))
imin=which(dsum==min(dsum))
del=c(imin,imax)
imin=which(dsum==min(dsum))
imax=which(dsum==max(dsum))
del=c(imin,imax)
x0=mean(x[-del])
y0=mean(y[-del])
d=rep(0,6)
r=5
for (i in 1:6) {
d[i]=(x[i]-x0)^2+(y[i]-y0)^2
}
d
plot(dsum)
dsum=rep(0,6)
for (i in 1:6) {
for (j in 1:6) {
d[i,j]=(x[i]-x[j])^2+(y[i]-y[j])^2
}
dsum[i]=sum(d[i,])/6
}
x=c(-3,3,2,5,0,7)
y=c(0,0,6,4,9,8)
d=rep(0,36)
dim(d)=c(6,6)
dsum=rep(0,6)
for (i in 1:6) {
for (j in 1:6) {
d[i,j]=(x[i]-x[j])^2+(y[i]-y[j])^2
}
dsum[i]=sum(d[i,])/6
}
plot(dsum)
d
dsum
x=c(-3,3,2,5,0,7)
y=c(0,0,6,4,9,8)
d=rep(0,36)
dim(d)=c(6,6)
dsum=rep(0,6)
for (i in 1:6) {
for (j in 1:6) {
d[i,j]=(x[i]-x[j])^2+(y[i]-y[j])^2
}
dsum[i]=sum(d[i,])/6
}
x=c(3,2,5,0,7)
y=c(0,6,4,9,8)
d=rep(0,25)
dim(d)=c(5,5)
dsum=rep(0,5)
for (i in 1:5) {
for (j in 1:5) {
d[i,j]=(x[i]-x[j])^2+(y[i]-y[j])^2
}
dsum[i]=sum(d[i,])/5
}
dsum
x=c(-2,2,0,0)
y=c(0,0,2,-2)
x=c(-2,2,0,0)
y=c(0,0,2,-2)
d=rep(0,16)
dim(d)=c(4,4)
dsum=rep(0,4)
for (i in 1:4) {
for (j in 1:4) {
d[i,j]=(x[i]-x[j])^2+(y[i]-y[j])^2
}
dsum[i]=sum(d[i,])/4
}
dsum
x=c(-3,3,2,5,0,7)
y=c(0,0,6,4,9,8)
d=rep(0,36)
dim(d)=c(6,6)
dsum=rep(0,6)
for (i in 1:6) {
for (j in 1:6) {
d[i,j]=(x[i]-x[j])^2+(y[i]-y[j])^2
}
dsum[i]=sum(d[i,])/6
}
dsum
x=c(-3,3,2,5,0,7)
y=c(0,0,6,4,9,8)
d=rep(0,36)
dim(d)=c(6,6)
dsum=rep(0,6)
for (i in 1:6) {
for (j in 1:6) {
d[i,j]=(x[i]-x[j])^2+(y[i]-y[j])^2
}
dsum[i]=sum(d[i,])
}
dsum
plot(y~x)
library(openxlsx)
library(writexl)
setwd('C:/Users/ZSR/PycharmProjects/pythonProject/identity')
list_name = dir("./",pattern = ".xlsx")
for (i in 1:2) {
d=read.xlsx(list_name[i], startRow = 1, sheet=1)
list_name[i]=sub('.xlsx', '.txt', list_name[i])
write_xlsx(tdata, fileext = list_name[i])
}
